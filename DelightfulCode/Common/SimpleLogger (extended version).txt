using System.Collections.Concurrent;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Text;

/// <summary>
/// Shortcut to indicating WHERE you want the log files stored, assuming local.
/// Each one has advantages and disadvantages depending on permissions on the local system.
/// Numbered in terms of preference regarding default locations.
/// </summary>
public enum LogfileLocation : byte
{
    /// <summary>
    /// When all else fails
    /// </summary>
    WindowsTemporaryFilesLocation = 1,
    /// <summary>
    /// Not always desirable, but still a good option
    /// </summary>
    SameFolderAsExecutable = 2,
    /// <summary>
    /// Creates a new folder in 'C:\inetpub\logs\LogFiles' if it exists on the local machine.
    /// This is a useful 
    /// </summary>
    IISWebsiteLogsFolder = 5,
    /// <summary>
    /// This is the correct-most location for storing log files,
    /// because it can usually be guaranteed a location.
    /// </summary>
    ApplicationDataFolder = 10,
}

/// <summary>
/// A basic logging mechanism with minimal maintenance or overhead.
/// Can be configured to automatically upload to Azure Blob Storage.
/// Base structure was combined from a number of sources, mainly: https://github.com/learn-some-code/csharp-samples
/// Designed to be used with: Dependency Injection and will work even without any starting parameters
/// 1. Doesn't keep the file open, means it can can be used by multiple processes.
/// </summary>
[Health(CodeStability.RequiresReview)]
public class SimpleLogger2
{
    private protected string application_name = string.Empty; // basic identification of the logger mechanism, will use at the prefix
    private protected string file_name_full = string.Empty; // this value will be determined during startup
    private protected int rollover_minutes; // how long before it automatically starts a new text file?
    private protected int rollover_size_mb; // or if it reaches a specific size first ...

    int interval;
    bool done;

    Task writingTask;

    private Assembly? assembly;
    private StreamWriter _streamWriter;
    private CancellationTokenSource delayToken;

    public string local_directory;

    private ConcurrentQueue<string> queue; // NOTE: 'ConcurrentQueue/Stack don't do any blocking nor in general any signaling between producers and consumers'
    private Stopwatch rollover_timer;
    private Stopwatch filesize_timer;

    private bool _disposed = false; // internal flag, prevents from running 'dispose' sequence more than one on the same object
    private bool _logging = false; // internal flag, logging operations are currently taking place
    private bool _writing = false; // internal flag, the mechanism is currently dumping stuff into the file

    /// <summary>
    /// Simple log mechanism, with a flush system.
    /// Can be called with the name of a desired file location
    /// </summary>
    public SimpleLogger2()
    {
        assembly = Assembly.GetCallingAssembly(); // has a value most of the time
        queue = new ConcurrentQueue<string>();
        delayToken = new CancellationTokenSource();
        rollover_timer = new Stopwatch();

        application_name = assembly.GetName().Name.Split('.')[0].ToLowerInvariant();
    }

    /// <summary>
    /// Activates the logging mechanism.
    /// This is also your opportunity to supply any new values for configuration.
    /// </summary>
    /// <param name="log_name_prefix">to aid file management, indicate a prefix to use (will be converted to lower case)</param>
    /// <param name="limit_minutes">Set a value to indicate the log file should rollover every x minutes (useful for long-running applications like websites) SET TO ZERO to disable this feature</param>
    /// <param name="limit_size_megabytes">Optionally limit the file size, in megabytes. Checks every minute.</param>
    public void Start(LogfileLocation location, int limit_size_megabytes = 0, int limit_minutes = 1440, int dump_timer_seconds = 20)
    {
        if (limit_minutes > 0) rollover_timer.Start();

        if (location == LogfileLocation.ApplicationDataFolder) local_directory = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), application_name, "logfiles");

        if (location == LogfileLocation.SameFolderAsExecutable) local_directory = Path.GetDirectoryName(assembly.Location);

        if (location == LogfileLocation.IISWebsiteLogsFolder) local_directory = Path.Combine(@"C:\inetpub\logs\LogFiles", application_name);

        if (location == LogfileLocation.WindowsTemporaryFilesLocation) local_directory = Path.Combine(System.IO.Path.GetTempPath(), application_name);

        GenerateNewFileName(); // use the currently-set directory, figure out the name to use.
    }

    /// <summary>
    /// Optionally specify the location/folder that you want to write to.
    /// </summary>
    /// <param name="folder_location_specific"></param>
    /// <param name="limit_size_megabytes"></param>
    /// <param name="limit_minutes"></param>
    /// <param name="dump_timer_seconds"></param>
    public void Start(string folder_location_specific, int limit_size_megabytes = 0, int limit_minutes = 1440, int dump_timer_seconds = 20)
    {
        local_directory = folder_location_specific;
        rollover_minutes = limit_minutes;
        rollover_size_mb = limit_size_megabytes;
        interval = dump_timer_seconds;
        done = false;

        writingTask = Task.Run(() => WriteLoop());
    }

    /// <summary>
    /// This will create an appropriate filename used for logging purposes.
    /// It can be called during rollover event or at the start.
    /// </summary>
    private void GenerateNewFileName()
    {
        if (!Directory.Exists(local_directory))
        {
            Directory.CreateDirectory(local_directory);
        }

        // The best way to check permissions is to actually write the file

        file_name_full = Path.Combine(local_directory, $"{Environment.MachineName}_{DateTime.Now:yyyyMMddHHmmssff}.txt").ToLowerInvariant();

        File.Create(file_name_full).Close();
        
    }

    /// <summary>
    /// Call this to momentarily disable any logging. It will:
    /// 1. Flush anything currently in the queue.
    /// 2. Tidy up the file.
    /// </summary>
    public async Task Stop()
    {
        done = true;
        delayToken.Cancel();
        await WriteOut(); // write out any remaining entries, locking while it does so
    }

    private async Task WriteLoop()
    {
        while (!done)
        {
            try
            {
                // Delay before committing a write
                await Task.Delay(interval, delayToken.Token);
                await WriteOut();
            }
            catch { }
        }
    }

    /// <summary>
    /// Collects all entries currently in the queue,
    /// dump the text into the file.
    /// </summary>
    private async Task WriteOut()
    {
        // Make sure there are log entries in the queue
        if (!queue.TryPeek(out string temp)) { return; }

        // If a size limit has been set, we need to constrain
        if (rollover_size_mb > 0)
        {
            // check the existing file size.
            FileInfo fi = new FileInfo(file_name_full);
            if (fi.Length * 1028 * 1028 > rollover_size_mb)
            {
                // rollover
                GenerateNewFileName();
            }
        }

        // Collect all log entries from queue
        StringBuilder sb = new StringBuilder();
        
        while (queue.TryDequeue(out string entry))
        {
            sb.AppendLine(entry);
        }

        await File.AppendAllTextAsync(file_name_full, sb.ToString());

    }

    public void WriteLine(string content)
    {
        if (_disposed) return;
        if (queue == null) return;

        if (rollover_minutes > 0 && rollover_timer.Elapsed.TotalMinutes > rollover_minutes)
        {
            GenerateNewFileName();
            rollover_timer.Reset();
            rollover_timer.Start();
        }

        queue.Enqueue($"{DateTime.Now:yyyy-MM-dd HH:mm:ss.fff} {content}{Environment.NewLine}");
    }

    /// <summary>
    /// A special overload which automatically adds extra lines about the error itself.
    /// [CallerFilePath] string sourceFilePath = "",
    /// </summary>
    public void WriteLine(Exception ex, [CallerFilePath] string sourceFilePath = "", [CallerMemberName] string sourceMethod = "", [CallerLineNumber] int sourceLineNum = 0)
    {
        queue.Enqueue($"{DateTime.Now:yyyy-MM-dd HH:mm:ss.fff} ------------------------------------------");
        queue.Enqueue($"ERROR {sourceMethod} on line {sourceLineNum} in {sourceFilePath}");
        queue.Enqueue($"STATUS: '{ex}");
        queue.Enqueue($"EXCEPTION: {ex.Message}");
        queue.Enqueue($"{ex?.InnerException}");
    }

    public void Dispose()
    {
        Dispose(true);
    }

    protected async virtual void Dispose(bool disposing)
    {
        if (!_disposed)
        {
            if (disposing)
            {
                _disposed = true;
                _logging = false;

                if (queue != null)
                {
                    queue.Clear();
                    queue = null;
                }
                
            }

        }
    }

}